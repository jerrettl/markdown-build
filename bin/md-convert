#!/bin/bash
# Created by Idel Martinez and Jerrett Longworth

# Setup variables
SCRIPT_LOCATION=$(readlink -e "$0")
SCRIPT_LOCATION=${SCRIPT_LOCATION%/*}

ROOT_DIR="$SCRIPT_LOCATION/../"
BUILD_DIR="$ROOT_DIR/build/"
TEMPLATE_DIR="$ROOT_DIR/templates/"

# Check if pandoc exists
if ! command -v pandoc &> /dev/null; then
	echo "Pandoc is not installed. Please install it and try again."
	exit -2
fi

show_usage() {
	cat << EOF
Usage: ${0##*/} [-dhmp] [-o output_file] <file>
Converts a Pandoc markdown file into a variety of formats. If no format is specified,
it will be converted to PDF.

Options:
  -d          Convert to DOCX.
  -h          Convert to HTML.
  -m          Use premailer in HTML output (disabled by default).
  -o <file>   Outputs to the specified file. If no location is specified, it will be
              located in the same directory as the source file.
  -p          Convert to PDF.
EOF
}

# Set default flags
customout=""
enable_premailer=0
input_file_location=""
tmpmd=""

convert_html() {
	if [ -n "$customout" ]; then
		outputfile="$customout"
	else
		outputfile="$input_file_location$1.html"
	fi

	tmphtml=$(mktemp --suffix ".html")

	echo "Adjusting *.md links to *.html links."
	perl -pi -e 's/(\(.*?\.)(md)(\))/\1html\3/g' "$tmpmd"

	echo "Converting to HTML."
	pandoc "$tmpmd" -o "$tmphtml" --highlight-style "$TEMPLATE_DIR/customhighlight.theme" --embed-resources --standalone --data-dir="$ROOT_DIR" --defaults "$BUILD_DIR/defaults.yaml"

	# Stop if conversion failed
	[ $? -ne 0 ] && return 1

	if [ $enable_premailer -eq 1 ]; then
		echo "Fixing CSS."
		tmp2html=$(mktemp --suffix ".html")
		python3 -m premailer -f "$tmphtml" -o "$tmp2html"
		mv "$tmp2html" "$tmphtml"
	fi

	mv "$tmphtml" "$outputfile"
}

convert_docx() {
	if [ -n "$customout" ]; then
		outputfile="$customout"
	else
		outputfile="$input_file_location$1.docx"
	fi

	echo "Converting to DOCX."
	pandoc "$tmpmd" -o "$outputfile" --highlight-style "$TEMPLATE_DIR/customhighlight.theme" --defaults "$BUILD_DIR/defaults.yaml"
}

convert_pdf() {
	if [ -n "$customout" ]; then
		outputfile="$customout"
	else
		outputfile="$input_file_location$1.pdf"
	fi

	echo "Converting to PDF."
	pandoc "$tmpmd" -o "$outputfile" --highlight-style "$TEMPLATE_DIR/customhighlight.theme" --defaults "$BUILD_DIR/defaults.yaml" --data-dir="$ROOT_DIR" --include-in-header "$BUILD_DIR/linewrap.tex"
}


# Set default flags for conversion modes
output_format_specified=0
docx=0
html=0
pdf=0

# Test for command line options
OPTIND=1
while getopts dhmo:p option; do
	case $option in
		d)
			docx=1
			output_format_specified=1
			;;
		h)
			html=1
			output_format_specified=1
			;;
		m)
			enable_premailer=1
			;;
		o)
			customout="${OPTARG}"
			;;
		p)
			pdf=1
			output_format_specified=1
			;;
		:)
			echo "Error: -${OPTARG} requires an argument."
			exit -1
			;;
		*)
			echo "Error: Unknown argument."
			show_usage
			exit -1
	esac
done
shift "$((OPTIND-1))"


# Check if python and premailer exist, if they are needed.
if [ $enable_premailer -eq 1 ]; then
	# Check if python exists
	if ! command -v python &> /dev/null; then
		echo "Python is not installed. Please install it and try again."
		exit -3
	fi

	if ! python -c "import premailer" &> /dev/null; then
		echo "Premailer is not installed. Please install it and try again."
		exit -4
	fi
fi

# If converting to HTML, Perl is used. Check if it exists in this case.
if [ $html -eq 1 ]; then
	if ! command -v perl &> /dev/null; then
		echo "Perl is not installed. Please install it and try again."
		exit -5
	fi
fi

# Stop if no file was given.
if [ -z "$1" ]; then
	show_usage
	exit -1
fi

# Stop if the file specified is not available.
if [ ! -f "$(readlink -e "$1")" ]; then
	echo "Error opening \"$1\"."
	exit -1
fi


# Create temporary markdown file for intermediate changes before conversion.
tmpmd=$(mktemp --suffix ".md")
cp "$1" "$tmpmd"

# Split the input file into its path and filename components.
# If no destination is specified, the output file's location will be the
# same as the input file's location.
if [[ "$1" == *"/"* ]]; then
	input_file_location="${1%/*}/"
else
	# Handle the special case where a file is on the current directory.
	input_file_location=""
fi

# Isolate the name of the file without its extension.
filename="${1##*/}"
if [[ "$1" == *"."* ]]; then
	file_no_extension="${1%.*}"
else
	# Special case where the input file already has no extension.
	file_no_extension="$1"
fi


# Convert to PDF by default.
if [ $output_format_specified -eq 0 ]; then pdf=1; fi

if [ $docx -eq 1 ]; then convert_docx "$file_no_extension"; fi
if [ $html -eq 1 ]; then convert_html "$file_no_extension"; fi
if [ $pdf  -eq 1 ]; then convert_pdf "$file_no_extension"; fi

echo "Cleaning up."
rm -f "$tmpmd"

echo "Finished."
